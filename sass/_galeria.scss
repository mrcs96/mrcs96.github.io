.galeria {
    background-color: $color-grey-light-1;
    grid-column: full-start / full-end;
    grid-row: 11 / 12;
    margin-top: 15rem;

    display: grid; //grid item se tornando um GRID CONTAINER
    grid-template-columns: repeat(10, 1fr);
    grid-template-rows: repeat(12, 5vw); //utilizando VW (view-width) para manter o ASPECT RATIO das CELLS do GRID
    //ao diminuir ou aumentar o view-port
    //outra maneira de se fazer isso seria atribuir um HEIGHT para a ROW que contém o GRID CONTAINER, isso faria com que
    //ao usar 1fr todas as CELLS teriam tamanhos iguais dividindo a HEIGHT com o número de ROWS
    grid-gap: 1.5rem;
    padding: 1.5rem;
    backface-visibility: hidden;
    overflow: hidden;
    //position: relative;

    @media only screen and (max-width: $bp-medium) {
        grid-row: 17 / 18;
    }

    &__item {
        transition: all ease-in-out .2s;
        box-shadow: 0 1.5rem 4rem rgba($color-secondary, .4);
        //z-index: 10;
        backface-visibility: hidden;
        overflow: hidden;

        &-hover {

            &:hover {
                transform: scale(1.05);
            }

            @media only screen and (max-width: $bp-small) {
                &:hover {
                    transform: scale(1.1);
                }
            }
        }

        &--1 {
            grid-row: 4 / 10;
            grid-column: 1 / -1;
        }
        
        &--2 {
            grid-row: 1 / span 3;
            grid-column: 1 / span 2;
        }

        &--3 {
            grid-row: 1 / span 3;
            grid-column: 3 / span 2;
        }
        
        &--4 {
            grid-row: 1 / span 3;
            grid-column: 5 / span 2;
        }

        &--5 {
            grid-row: 1 / span 3;
            grid-column: 7 / span 2;
        }

        &--6 {
            grid-row: 1 / span 3;
            grid-column: 9 / span 2;
        }

        &--7 {
            grid-row: 10 / span 3;
            grid-column: 1 / span 2;
        }

        &--8 {
            grid-row: 10 / span 3;
            grid-column: 3 / span 2;
        }

        &--9 {
            grid-row: 10 / span 3;
            grid-column: 5 / span 2;
        }

        &--10 {
            grid-row: 10 / span 3;
            grid-column: 7 / span 2;
        }

        &--11 {
            grid-row: 10 / span 3;
            grid-column: 9 / span 2;
        }

        &--12 {
            grid-row: 5 / span 2;
            grid-column: 4 / span 2;
        }

        &--13 {
            grid-row: 3 / span 2;
            grid-column: 7 / 8;
        }

        &--14 {
            grid-row: 7 / 8;
            grid-column: 5 / 6;
        }

        &--15 {
            grid-row: 6 / span 2;
            grid-column: 3 / 4;
        }

        &--16 {
            grid-row: 6 / span 2;
            grid-column: 6 / 7;
        }
    }

    &__img {
        width: 100%;
        height: 100%;
        object-fit: cover; //faz com que a IMG caiba exatamente dentro da CELL, para que funcione é preciso especificar HEIGHT e WIDTH
        display: block;
    }
}